trigger:
  batch: true # combine multiple commits or pushes to the same branch into one build
  branches:
    include:
      - main
  tags:
    include:
      - '*'
pr:
  branches:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'
  workspace:
    clean: all # delete all files before a new build

variables:
  DOCKER_REGISTRY_SERVICE_CONNECTION: 'docker-registry'
  IMAGE_NAME: 'torleifs/webauthn'
  containerName: '$web' # $web is a special container for static websites
  API_URL: 'https://api.thelogin.xyz'

stages:
  - stage: Build
    jobs:
      - job: BuildFrontend
        displayName: 'Build frontend'
        condition: contains(variables['Build.SourceBranchName'], 'main')
        steps:
          - checkout: self # necessary since we do git diff
            fetchDepth: 2
          - script: |
              echo "Checking if frontend has changed"
              if git diff --name-only HEAD^ HEAD | grep -q -e '^frontend/' -e '^azure/'; then
                echo "##vso[task.setvariable variable=FrontendChanged;isOutput=true]true";
                echo "##vso[task.setvariable variable=stopJob]false";
              else
                echo "##vso[task.setvariable variable=FrontendChanged;isOutput=true]false";
                echo "##vso[task.setvariable variable=stopJob]true";
                echo $variables.stopJob
              fi
            displayName: 'Check if frontend changed'
            name: CheckFrontendChanges
          - task: UseNode@1
            condition: eq(variables.stopJob, 'false')
            inputs:
              version: '21.x'
          - task: Cache@2
            condition: eq(variables.stopJob, 'false')
            inputs:
              # package-lock.json content is hashed to construct the key
              key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
              path: 'frontend/node_modules'
          - script: |
              pushd frontend
              echo "API URL: $VITE_API_URL"
              npm install
              npm run build
              popd
            displayName: 'Build frontend'
            condition: eq(variables.stopJob, 'false')
            env:
              VITE_API_URL: $(API_URL)
          - task: PublishPipelineArtifact@1
            condition: eq(variables.stopJob, 'false')
            inputs:
              targetPath: 'frontend/dist'
              artifact: 'frontend_build'
      - job: BuildBackend
        displayName: 'Build backend'
        steps:
          - checkout: self
            fetchDepth: 2
          - script: |
              if git diff --name-only HEAD^ HEAD | grep -q -e '^backend/' -e '^azure/'; then
                echo "##vso[task.setvariable variable=BackendChanged;isOutput=true]true";
                echo "##vso[task.setvariable variable=stopJob]false";
              else
                echo "##vso[task.setvariable variable=BackendChanged;isOutput=true]false";
                echo "##vso[task.setvariable variable=stopJob]true";
              fi
            displayName: 'Check for changes in backend'
            name: CheckBackendChanges

          - script: |
              echo "Stop job: $variables.stopJob"
            displayName: 'Check for stopjob'
            name: debugstopJob
          - task: Docker@2
            displayName: 'Build backend container image'
            condition: eq(variables.stopJob, 'false')
            inputs:
              containerRegistry: $(DOCKER_REGISTRY_SERVICE_CONNECTION)
              repository: $(IMAGE_NAME)
              command: buildAndPush
              Dockerfile: $(Build.SourcesDirectory)/backend/Dockerfile
              tags: |
                $(Build.BuildId)
                latest
  - stage: Deploy
    dependsOn: Build
    jobs:
      - job: DebugVariables
        displayName: 'Debug Output Variables'
        steps:
          - script: |
              echo "FrontendChanged: $(stageDependencies.Build.BuildFrontend.outputs)"

      - job: DeployFrontend
        displayName: 'Deploy frontend'
        condition: |
          and(
            eq(stageDependencies.Build.BuildFrontend.outputs['CheckFrontendChanges.FrontendChanged'], 'true'), 
            ne(variables['Build.Reason'], 'PullRequest')
          )
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'frontend_build'
              targetPath: '$(Build.SourcesDirectory)/frontend/dist'
          - task: AzureCLI@2
            displayName: 'Set static website properties'
            inputs:
              azureSubscription: 'deploy-dockerized-api'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob service-properties update \
                  --account-name myuniqueloginstorage \
                  --static-website \
                  --index-document index.html \
                  --404-document 404.html
          - task: AzureCLI@2
            displayName: 'Upload web app to storage account'
            inputs:
              azureSubscription: 'deploy-dockerized-api'
              scriptType: bash
              scriptLocation: inlineScript
              # overwrite is important, or nothing will be written
              inlineScript: |
                az storage blob upload-batch \
                  --account-name myuniqueloginstorage \
                  --destination '$(containerName)' \
                  --source frontend/dist \
                  --pattern "*" \
                  --overwrite
          - task: AzureCLI@2
            displayName: 'Purge CDN endpoint'
            inputs:
              azureSubscription: 'deploy-dockerized-api'
              scriptType: bash
              scriptLocation: inlineScript

              inlineScript: |
                az cdn endpoint purge \
                  --resource-group login-rg \
                  --profile-name  myloginservice-cdn\
                  --name  myloginservice-cdn-endpoint\
                  --content-paths '/*'

      - job: DeployBackend
        displayName: 'Deploy backend'
        condition: |
          and(
            eq(stageDependencies.Build.BuildBackend.outputs['CheckBackendChanges.BackendChanged'], 'true'), 
            ne(variables['Build.Reason'], 'PullRequest')
          )
        steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy API to Azure App Service'
            inputs:
              azureSubscription: 'deploy-dockerized-api'
              appName: 'myuniquepasswordlessloginservice'
              resourceGroup: 'login-rg'
              containers: $(IMAGE_NAME):latest
